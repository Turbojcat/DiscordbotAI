class ResourceManager {
    constructor() {
        // Initialize with predefined resource pools including new resources
        this.resources = {
            'wood': { quantity: 1000, extractionRate: 10, regenerationRate: 5 },
            'stone': { quantity: 800, extractionRate: 5, regenerationRate: 2 },
            'gold': { quantity: 500, extractionRate: 2, regenerationRate: 1 },
            'iron': { quantity: 600, extractionRate: 4, regenerationRate: 2 },
            'silver': { quantity: 300, extractionRate: 3, regenerationRate: 1.5 },
            'copper': { quantity: 500, extractionRate: 5, regenerationRate: 2.5 },
            'herbs': { quantity: 450, extractionRate: 6, regenerationRate: 3 },
            'crystals': { quantity: 200, extractionRate: 1, regenerationRate: 0.5 },
            'water': { quantity: 10000, extractionRate: 100, regenerationRate: 50, seasonalImpact: true },
            'food': { quantity: 2000, extractionRate: 20, regenerationRate: 10 },
            'energy': { quantity: 1000, extractionRate: 10, regenerationRate: 5 },
            'livestock': { quantity: 300, extractionRate: 3, regenerationRate: 2 },
            'medicinalHerbs': { quantity: 100, extractionRate: 1, regenerationRate: 0.5 }
        };
    }

    // Extract resources, reducing the quantity available based on the extraction rate
    extractResource(resourceType, amount) {
        if (this.resources[resourceType] && this.resources[resourceType].quantity >= amount) {
            this.resources[resourceType].quantity -= amount;
            console.log(`${amount} of ${resourceType} extracted. Remaining: ${this.resources[resourceType].quantity}`);
        } else {
            console.log(`Not enough ${resourceType} available for extraction.`);
        }
    }

    // Regenerate resources naturally over time, simulating environmental recovery
    regenerateResources() {
        Object.keys(this.resources).forEach(resource => {
            this.resources[resource].quantity += this.resources[resource].regenerationRate;
            console.log(`${resource} regenerated by ${this.resources[resource].regenerationRate}. Total: ${this.resources[resource].quantity}`);
        });
    }

    // Adjust water levels based on seasonal changes
    adjustWaterLevels(season) {
        if (season === 'rainy') {
            this.resources['water'].quantity += 500; // Increase water during rainy season
        } else if (season === 'dry') {
            this.resources['water'].quantity -= 500; // Decrease water during dry season
        }
        console.log(`Water levels adjusted for ${season} season: ${this.resources['water'].quantity}`);
    }

    // Report current status of all resources
    reportResources() {
        console.log("Current Resources Status:");
        Object.keys(this.resources).forEach(resource => {
            console.log(`${resource}: ${this.resources[resource].quantity}`);
        });
    }
}

module.exports = { ResourceManager };
